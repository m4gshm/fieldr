// Code generated by 'fieldr -type Struct -wrap -export -output struct_util.go'; DO NOT EDIT.

package examples

type (
	StructField     string
	StructFields    []StructField
	StructTag       string
	StructTags      []StructTag
	StructTagValue  string
	StructTagValues []StructTagValue
)

const (
	Struct_ID     = StructField("ID")
	Struct_Name   = StructField("Name")
	Struct_NoJson = StructField("NoJson")
	Struct_ts     = StructField("ts")

	Struct_db   = StructTag("db")
	Struct_json = StructTag("json")

	Struct_db_ID     = StructTagValue("ID")
	Struct_db_Name   = StructTagValue("NAME")
	Struct_db_NoJson = StructTagValue("NO_JSON")
	Struct_db_ts     = StructTagValue("TS")

	Struct_json_ID   = StructTagValue("id")
	Struct_json_Name = StructTagValue("name")
	Struct_json_ts   = StructTagValue("ts")
)

var (
	struct_Fields = StructFields{Struct_ID, Struct_Name, Struct_NoJson, Struct_ts}

	struct_Tags = StructTags{Struct_db, Struct_json}

	struct_FieldTags = map[StructField]StructTags{
		Struct_ID:     StructTags{Struct_db, Struct_json},
		Struct_Name:   StructTags{Struct_db, Struct_json},
		Struct_NoJson: StructTags{Struct_db},
		Struct_ts:     StructTags{Struct_db, Struct_json},
	}

	struct_TagValues = map[StructTag]StructTagValues{
		Struct_db:   StructTagValues{Struct_db_ID, Struct_db_Name, Struct_db_NoJson, Struct_db_ts},
		Struct_json: StructTagValues{Struct_json_ID, Struct_json_Name, Struct_json_ts},
	}

	struct_TagFields = map[StructTag]StructFields{
		Struct_db:   StructFields{Struct_ID, Struct_Name, Struct_NoJson, Struct_ts},
		Struct_json: StructFields{Struct_ID, Struct_Name, Struct_ts},
	}

	struct_FieldTagValue = map[StructField]map[StructTag]StructTagValue{
		Struct_ID:     map[StructTag]StructTagValue{Struct_db: Struct_db_ID, Struct_json: Struct_json_ID},
		Struct_Name:   map[StructTag]StructTagValue{Struct_db: Struct_db_Name, Struct_json: Struct_json_Name},
		Struct_NoJson: map[StructTag]StructTagValue{Struct_db: Struct_db_NoJson},
		Struct_ts:     map[StructTag]StructTagValue{Struct_db: Struct_db_ts, Struct_json: Struct_json_ts},
	}
)

func (v StructFields) Strings() []string {
	strings := make([]string, 0, len(v))
	for i, val := range v {
		strings[i] = string(val)
	}
	return strings
}

func (v StructTags) Strings() []string {
	strings := make([]string, 0, len(v))
	for i, val := range v {
		strings[i] = string(val)
	}
	return strings
}

func (v StructTagValues) Strings() []string {
	strings := make([]string, 0, len(v))
	for i, val := range v {
		strings[i] = string(val)
	}
	return strings
}

func (v *Struct) GetFieldValue(field StructField) interface{} {
	switch field {
	case Struct_ID:
		return v.ID
	case Struct_Name:
		return v.Name
	case Struct_NoJson:
		return v.NoJson
	case Struct_ts:
		return v.ts
	}
	return nil
}

func (v *Struct) GetFieldValueByTagValue(tag StructTagValue) interface{} {
	switch tag {
	case Struct_db_ID, Struct_json_ID:
		return v.ID
	case Struct_db_Name, Struct_json_Name:
		return v.Name
	case Struct_db_NoJson:
		return v.NoJson
	case Struct_db_ts, Struct_json_ts:
		return v.ts
	}
	return nil
}

func (v *Struct) GetFieldValuesByTag(tag StructTag) []interface{} {
	switch tag {
	case Struct_db:
		return []interface{}{v.ID, v.Name, v.NoJson, v.ts}
	case Struct_json:
		return []interface{}{v.ID, v.Name, v.ts}
	}
	return nil
}

func (v *Struct) AsMap() map[StructField]interface{} {
	return map[StructField]interface{}{
		Struct_ID:     v.ID,
		Struct_Name:   v.Name,
		Struct_NoJson: v.NoJson,
		Struct_ts:     v.ts,
	}
}
func (v *Struct) AsTagMap(tag StructTag) map[StructTagValue]interface{} {
	switch tag {
	case Struct_db:
		return map[StructTagValue]interface{}{
			Struct_db_ID:     v.ID,
			Struct_db_Name:   v.Name,
			Struct_db_NoJson: v.NoJson,
			Struct_db_ts:     v.ts,
		}
	case Struct_json:
		return map[StructTagValue]interface{}{
			Struct_json_ID:   v.ID,
			Struct_json_Name: v.Name,
			Struct_json_ts:   v.ts,
		}
	}
	return nil
}
