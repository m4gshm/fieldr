// Code generated by 'fieldr'; DO NOT EDIT.

package builder

import (
	"bytes"
	"example/sql_base"
	"time"
)

type EntityBuilderChainRefBuildVal[ID any] struct {
	ID        ID
	Code      string
	ForeignID ID
	NoDB      *NoDBFieldsEntity
	Name      StringBasedType[string]
	Surname   string
	Values    []int32
	Ts        []*time.Time
	Versioned sql_base.VersionedEntity
	Chan      chan map[time.Time]string
	SomeMap   map[StringBasedType[string]]bytes.Buffer
	Embedded  EmbeddedEntity
}

func NewEntityBuilderChainRefBuildVal[ID any]() *EntityBuilderChainRefBuildVal[ID] {
	return &EntityBuilderChainRefBuildVal[ID]{}
}

func (b *EntityBuilderChainRefBuildVal[ID]) Build() Entity[ID] {
	if b == nil {
		return Entity[ID]{}
	}
	return Entity[ID]{
		BaseEntity: &BaseEntity[ID]{
			ID: b.ID,
			CodeAwareEntity: &CodeAwareEntity{
				Code: b.Code,
			},
			ForeignIDAwareEntity: ForeignIDAwareEntity[ID]{
				ForeignID: b.ForeignID,
			},
		},
		NoDB:      b.NoDB,
		Name:      b.Name,
		Surname:   b.Surname,
		Values:    b.Values,
		Ts:        b.Ts,
		Versioned: b.Versioned,
		Chan:      b.Chan,
		SomeMap:   b.SomeMap,
		Embedded:  b.Embedded,
	}
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetID(iD ID) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.ID = iD
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetCode(code string) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.Code = code
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetForeignID(foreignID ID) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.ForeignID = foreignID
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetNoDB(noDB *NoDBFieldsEntity) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.NoDB = noDB
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetName(name StringBasedType[string]) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.Name = name
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetSurname(surname string) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.Surname = surname
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetValues(values []int32) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.Values = values
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetTs(ts []*time.Time) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.Ts = ts
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetVersioned(versioned sql_base.VersionedEntity) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.Versioned = versioned
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetChan(chan_ chan map[time.Time]string) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.Chan = chan_
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetSomeMap(someMap map[StringBasedType[string]]bytes.Buffer) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.SomeMap = someMap
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID]) SetEmbedded(embedded EmbeddedEntity) *EntityBuilderChainRefBuildVal[ID] {
	if b != nil {
		b.Embedded = embedded
	}
	return b
}
