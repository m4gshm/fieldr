// Code generated by 'fieldr'; DO NOT EDIT.

package builder

import (
	"bytes"
	"example/sql_base"
	"time"
)

type EntityBuilder[ID any] struct {
	ID           ID
	Code         string
	ForeignID    ID
	Schema       string
	Version      int
	NoDB         *NoDBFieldsEntity
	Name         StringBasedType[string]
	Surname      string
	Values       []int32
	Ts           []*time.Time
	Versioned    sql_base.VersionedEntity
	Chan         chan map[time.Time]string
	SomeMap      map[StringBasedType[string]]bytes.Buffer
	Embedded     EmbeddedEntity
	OldForeignID *ForeignIDAwareEntity[ID]
}

func NewEntityBuilder[ID any]() *EntityBuilder[ID] {
	return &EntityBuilder[ID]{}
}

func (b *EntityBuilder[ID]) Build() *Entity[ID] {
	if b == nil {
		return &Entity[ID]{}
	}
	return &Entity[ID]{
		BaseEntity: &BaseEntity[ID]{
			ID: b.ID,
			RefCodeAwareEntity: &RefCodeAwareEntity{
				CodeAwareEntity: &CodeAwareEntity{
					Code: b.Code,
				},
			},
			ForeignIDAwareEntity: ForeignIDAwareEntity[ID]{
				ForeignID: b.ForeignID,
			},
		},
		Metadata: Metadata{
			Schema:  b.Schema,
			Version: b.Version,
		},
		NoDB:         b.NoDB,
		Name:         b.Name,
		Surname:      b.Surname,
		Values:       b.Values,
		Ts:           b.Ts,
		Versioned:    b.Versioned,
		Chan:         b.Chan,
		SomeMap:      b.SomeMap,
		Embedded:     b.Embedded,
		OldForeignID: b.OldForeignID,
	}
}

func (b *EntityBuilder[ID]) SetID(iD ID) *EntityBuilder[ID] {
	if b != nil {
		b.ID = iD
	}
	return b
}

func (b *EntityBuilder[ID]) SetCode(code string) *EntityBuilder[ID] {
	if b != nil {
		b.Code = code
	}
	return b
}

func (b *EntityBuilder[ID]) SetForeignID(foreignID ID) *EntityBuilder[ID] {
	if b != nil {
		b.ForeignID = foreignID
	}
	return b
}

func (b *EntityBuilder[ID]) SetSchema(schema string) *EntityBuilder[ID] {
	if b != nil {
		b.Schema = schema
	}
	return b
}

func (b *EntityBuilder[ID]) SetVersion(version int) *EntityBuilder[ID] {
	if b != nil {
		b.Version = version
	}
	return b
}

func (b *EntityBuilder[ID]) SetNoDB(noDB *NoDBFieldsEntity) *EntityBuilder[ID] {
	if b != nil {
		b.NoDB = noDB
	}
	return b
}

func (b *EntityBuilder[ID]) SetName(name StringBasedType[string]) *EntityBuilder[ID] {
	if b != nil {
		b.Name = name
	}
	return b
}

func (b *EntityBuilder[ID]) SetSurname(surname string) *EntityBuilder[ID] {
	if b != nil {
		b.Surname = surname
	}
	return b
}

func (b *EntityBuilder[ID]) SetValues(values []int32) *EntityBuilder[ID] {
	if b != nil {
		b.Values = values
	}
	return b
}

func (b *EntityBuilder[ID]) SetTs(ts []*time.Time) *EntityBuilder[ID] {
	if b != nil {
		b.Ts = ts
	}
	return b
}

func (b *EntityBuilder[ID]) SetVersioned(versioned sql_base.VersionedEntity) *EntityBuilder[ID] {
	if b != nil {
		b.Versioned = versioned
	}
	return b
}

func (b *EntityBuilder[ID]) SetChan(chan_ chan map[time.Time]string) *EntityBuilder[ID] {
	if b != nil {
		b.Chan = chan_
	}
	return b
}

func (b *EntityBuilder[ID]) SetSomeMap(someMap map[StringBasedType[string]]bytes.Buffer) *EntityBuilder[ID] {
	if b != nil {
		b.SomeMap = someMap
	}
	return b
}

func (b *EntityBuilder[ID]) SetEmbedded(embedded EmbeddedEntity) *EntityBuilder[ID] {
	if b != nil {
		b.Embedded = embedded
	}
	return b
}

func (b *EntityBuilder[ID]) SetOldForeignID(oldForeignID *ForeignIDAwareEntity[ID]) *EntityBuilder[ID] {
	if b != nil {
		b.OldForeignID = oldForeignID
	}
	return b
}

func (e *Entity[ID]) ToBuilder() *EntityBuilder[ID] {
	if e == nil {
		return &EntityBuilder[ID]{}
	}
	var (
		BaseEntity_ID                                      ID
		BaseEntity_RefCodeAwareEntity_CodeAwareEntity_Code string
		BaseEntity_ForeignIDAwareEntity_ForeignID          ID
	)
	if be := e.BaseEntity; be != nil {
		BaseEntity_ID = be.ID
		if rcae := be.RefCodeAwareEntity; rcae != nil {
			if cae := rcae.CodeAwareEntity; cae != nil {
				BaseEntity_RefCodeAwareEntity_CodeAwareEntity_Code = cae.Code
			}
		}
		BaseEntity_ForeignIDAwareEntity_ForeignID = be.ForeignIDAwareEntity.ForeignID
	}

	return &EntityBuilder[ID]{
		ID:           BaseEntity_ID,
		Code:         BaseEntity_RefCodeAwareEntity_CodeAwareEntity_Code,
		ForeignID:    BaseEntity_ForeignIDAwareEntity_ForeignID,
		Schema:       e.Metadata.Schema,
		Version:      e.Metadata.Version,
		NoDB:         e.NoDB,
		Name:         e.Name,
		Surname:      e.Surname,
		Values:       e.Values,
		Ts:           e.Ts,
		Versioned:    e.Versioned,
		Chan:         e.Chan,
		SomeMap:      e.SomeMap,
		Embedded:     e.Embedded,
		OldForeignID: e.OldForeignID,
	}
}
