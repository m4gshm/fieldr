// Code generated by 'fieldr'; DO NOT EDIT.

package internal

import (
	"bytes"
	"example/builder"
	"example/sql_base"
	"time"
)

type EntityBuilder[ID any] struct {
	iD           ID
	code         string
	foreignID    ID
	schema       string
	version      int
	noDB         *builder.NoDBFieldsEntity
	name         builder.StringBasedType[string]
	surname      string
	values       []int32
	ts           []*time.Time
	versioned    sql_base.VersionedEntity
	chan_        chan map[time.Time]string
	someMap      map[builder.StringBasedType[string]]bytes.Buffer
	embedded     builder.EmbeddedEntity
	oldForeignID *builder.ForeignIDAwareEntity[ID]
}

func NewEntityBuilder[ID any]() *EntityBuilder[ID] {
	return &EntityBuilder[ID]{}
}

func (b *EntityBuilder[ID]) Build() *builder.Entity[ID] {
	if b == nil {
		return &builder.Entity[ID]{}
	}
	return &builder.Entity[ID]{
		BaseEntity: &builder.BaseEntity[ID]{
			ID: b.iD,
			RefCodeAwareEntity: &builder.RefCodeAwareEntity{
				CodeAwareEntity: &builder.CodeAwareEntity{
					Code: b.code,
				},
			},
			ForeignIDAwareEntity: builder.ForeignIDAwareEntity[ID]{
				ForeignID: b.foreignID,
			},
		},
		Metadata: builder.Metadata{
			Schema:  b.schema,
			Version: b.version,
		},
		NoDB:         b.noDB,
		Name:         b.name,
		Surname:      b.surname,
		Values:       b.values,
		Ts:           b.ts,
		Versioned:    b.versioned,
		Chan:         b.chan_,
		SomeMap:      b.someMap,
		Embedded:     b.embedded,
		OldForeignID: b.oldForeignID,
	}
}

func (b *EntityBuilder[ID]) ID(iD ID) *EntityBuilder[ID] {
	if b != nil {
		b.iD = iD
	}
	return b
}

func (b *EntityBuilder[ID]) Code(code string) *EntityBuilder[ID] {
	if b != nil {
		b.code = code
	}
	return b
}

func (b *EntityBuilder[ID]) ForeignID(foreignID ID) *EntityBuilder[ID] {
	if b != nil {
		b.foreignID = foreignID
	}
	return b
}

func (b *EntityBuilder[ID]) Schema(schema string) *EntityBuilder[ID] {
	if b != nil {
		b.schema = schema
	}
	return b
}

func (b *EntityBuilder[ID]) Version(version int) *EntityBuilder[ID] {
	if b != nil {
		b.version = version
	}
	return b
}

func (b *EntityBuilder[ID]) NoDB(noDB *builder.NoDBFieldsEntity) *EntityBuilder[ID] {
	if b != nil {
		b.noDB = noDB
	}
	return b
}

func (b *EntityBuilder[ID]) Name(name builder.StringBasedType[string]) *EntityBuilder[ID] {
	if b != nil {
		b.name = name
	}
	return b
}

func (b *EntityBuilder[ID]) Surname(surname string) *EntityBuilder[ID] {
	if b != nil {
		b.surname = surname
	}
	return b
}

func (b *EntityBuilder[ID]) Values(values []int32) *EntityBuilder[ID] {
	if b != nil {
		b.values = values
	}
	return b
}

func (b *EntityBuilder[ID]) Ts(ts []*time.Time) *EntityBuilder[ID] {
	if b != nil {
		b.ts = ts
	}
	return b
}

func (b *EntityBuilder[ID]) Versioned(versioned sql_base.VersionedEntity) *EntityBuilder[ID] {
	if b != nil {
		b.versioned = versioned
	}
	return b
}

func (b *EntityBuilder[ID]) Chan_(chan_ chan map[time.Time]string) *EntityBuilder[ID] {
	if b != nil {
		b.chan_ = chan_
	}
	return b
}

func (b *EntityBuilder[ID]) SomeMap(someMap map[builder.StringBasedType[string]]bytes.Buffer) *EntityBuilder[ID] {
	if b != nil {
		b.someMap = someMap
	}
	return b
}

func (b *EntityBuilder[ID]) Embedded(embedded builder.EmbeddedEntity) *EntityBuilder[ID] {
	if b != nil {
		b.embedded = embedded
	}
	return b
}

func (b *EntityBuilder[ID]) OldForeignID(oldForeignID *builder.ForeignIDAwareEntity[ID]) *EntityBuilder[ID] {
	if b != nil {
		b.oldForeignID = oldForeignID
	}
	return b
}

func ToBuilder[ID any](i *builder.Entity[ID]) *EntityBuilder[ID] {
	if i == nil {
		return &EntityBuilder[ID]{}
	}
	var (
		BaseEntity_ID                                      ID
		BaseEntity_RefCodeAwareEntity_CodeAwareEntity_Code string
		BaseEntity_ForeignIDAwareEntity_ForeignID          ID
	)
	if i_be := i.BaseEntity; i_be != nil {
		BaseEntity_ID = i_be.ID
		if i__rcae := i_be.RefCodeAwareEntity; i__rcae != nil {
			if i___cae := i__rcae.CodeAwareEntity; i___cae != nil {
				BaseEntity_RefCodeAwareEntity_CodeAwareEntity_Code = i___cae.Code
			}
		}
		BaseEntity_ForeignIDAwareEntity_ForeignID = i_be.ForeignIDAwareEntity.ForeignID
	}

	return &EntityBuilder[ID]{
		iD:           BaseEntity_ID,
		code:         BaseEntity_RefCodeAwareEntity_CodeAwareEntity_Code,
		foreignID:    BaseEntity_ForeignIDAwareEntity_ForeignID,
		schema:       i.Metadata.Schema,
		version:      i.Metadata.Version,
		noDB:         i.NoDB,
		name:         i.Name,
		surname:      i.Surname,
		values:       i.Values,
		ts:           i.Ts,
		versioned:    i.Versioned,
		chan_:        i.Chan,
		someMap:      i.SomeMap,
		embedded:     i.Embedded,
		oldForeignID: i.OldForeignID,
	}
}
