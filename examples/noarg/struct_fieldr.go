// Code generated by 'fieldr -type Struct -wrap'; DO NOT EDIT.

package noarg

type (
	structField     string
	structFields    []structField
	structTag       string
	structTags      []structTag
	structTagValue  string
	structTagValues []structTagValue
)

const (
	structField_ID              = structField("ID")
	structField_Name            = structField("Name")
	structField_Surname         = structField("Surname")
	structField_noExport        = structField("noExport")
	structField_NoTag           = structField("NoTag")
	structField_IgnoredInTagMap = structField("IgnoredInTagMap")

	structTag_toMap = structTag("toMap")

	structTagValue_toMap_ID       = structTagValue("id")
	structTagValue_toMap_Name     = structTagValue("name")
	structTagValue_toMap_Surname  = structTagValue("surname")
	structTagValue_toMap_noExport = structTagValue("no_export")
	structTagValue_toMap_NoTag    = structTagValue("NoTag") //empty tag

)

func (v structFields) strings() []string {
	strings := make([]string, len(v))
	for i, val := range v {
		strings[i] = string(val)
	}
	return strings
}

func (v structTags) strings() []string {
	strings := make([]string, len(v))
	for i, val := range v {
		strings[i] = string(val)
	}
	return strings
}

func (v structTagValues) strings() []string {
	strings := make([]string, len(v))
	for i, val := range v {
		strings[i] = string(val)
	}
	return strings
}

var (
	struct_Fields = structFields{structField_ID, structField_Name, structField_Surname, structField_NoTag, structField_IgnoredInTagMap}

	struct_Tags = structTags{structTag_toMap}

	struct_FieldTags = map[structField]structTags{
		structField_ID:              structTags{structTag_toMap},
		structField_Name:            structTags{structTag_toMap},
		structField_Surname:         structTags{structTag_toMap},
		structField_NoTag:           structTags{structTag_toMap},
		structField_IgnoredInTagMap: structTags{},
	}

	struct_TagValues = map[structTag]structTagValues{
		structTag_toMap: structTagValues{structTagValue_toMap_ID, structTagValue_toMap_Name, structTagValue_toMap_Surname, structTagValue_toMap_NoTag},
	}

	struct_TagFields = map[structTag]structFields{
		structTag_toMap: structFields{structField_ID, structField_Name, structField_Surname, structField_NoTag},
	}

	struct_FieldTagValue = map[structField]map[structTag]structTagValue{
		structField_ID:              map[structTag]structTagValue{structTag_toMap: structTagValue_toMap_ID},
		structField_Name:            map[structTag]structTagValue{structTag_toMap: structTagValue_toMap_Name},
		structField_Surname:         map[structTag]structTagValue{structTag_toMap: structTagValue_toMap_Surname},
		structField_NoTag:           map[structTag]structTagValue{structTag_toMap: structTagValue_toMap_NoTag},
		structField_IgnoredInTagMap: map[structTag]structTagValue{},
	}
)

func (v *Struct) getFieldValue(field structField) interface{} {
	switch field {
	case structField_ID:
		return v.ID
	case structField_Name:
		return v.Name
	case structField_Surname:
		return v.Surname
	case structField_NoTag:
		return v.NoTag
	case structField_IgnoredInTagMap:
		return v.IgnoredInTagMap
	}
	return nil
}

func (v *Struct) getFieldValueByTagValue(tag structTagValue) interface{} {
	switch tag {
	case structTagValue_toMap_ID:
		return v.ID
	case structTagValue_toMap_Name:
		return v.Name
	case structTagValue_toMap_Surname:
		return v.Surname
	case structTagValue_toMap_NoTag:
		return v.NoTag
	}
	return nil
}

func (v *Struct) getFieldValuesByTag(tag structTag) []interface{} {
	switch tag {
	case structTag_toMap:
		return []interface{}{v.ID, v.Name, v.Surname, v.NoTag}
	}
	return nil
}

func (v *Struct) asMap() map[structField]interface{} {
	return map[structField]interface{}{
		structField_ID:              v.ID,
		structField_Name:            v.Name,
		structField_Surname:         v.Surname,
		structField_NoTag:           v.NoTag,
		structField_IgnoredInTagMap: v.IgnoredInTagMap,
	}
}

func (v *Struct) asTagMap(tag structTag) map[structTagValue]interface{} {
	switch tag {
	case structTag_toMap:
		return map[structTagValue]interface{}{
			structTagValue_toMap_ID:      v.ID,
			structTagValue_toMap_Name:    v.Name,
			structTagValue_toMap_Surname: v.Surname,
			structTagValue_toMap_NoTag:   v.NoTag,
		}
	}
	return nil
}
