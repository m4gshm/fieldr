// Code generated by 'fieldr'; DO NOT EDIT.

package noarg

const (
	structFieldID              = "ID"
	structFieldName            = "Name"
	structFieldSurname         = "Surname"
	structFieldNoExport        = "noExport"
	structFieldNoTag           = "NoTag"
	structFieldIgnoredInTagMap = "IgnoredInTagMap"

	structTagToMap = "toMap"

	structTagValueToMapID       = "id"
	structTagValueToMapName     = "name"
	structTagValueToMapSurname  = "surname"
	structTagValueToMapNoExport = "no_export"
	structTagValueToMapNoTag    = "NoTag" //empty tag
)

var (
	structFields = []string{
		structFieldID,
		structFieldName,
		structFieldSurname,
		structFieldNoTag,
		structFieldIgnoredInTagMap,
	}

	structTags = []string{structTagToMap}

	structFieldTags = map[string][]string{
		structFieldID:              []string{structTagToMap},
		structFieldName:            []string{structTagToMap},
		structFieldSurname:         []string{structTagToMap},
		structFieldNoTag:           []string{structTagToMap},
		structFieldIgnoredInTagMap: []string{},
	}

	structTagValuesToMap = []string{
		structTagValueToMapID,
		structTagValueToMapName,
		structTagValueToMapSurname,
		structTagValueToMapNoTag,
	}

	structTagValues = map[string][]string{
		structTagToMap: []string{
			structTagValueToMapID,
			structTagValueToMapName,
			structTagValueToMapSurname,
			structTagValueToMapNoTag,
		},
	}

	structTagFields = map[string][]string{
		structTagToMap: []string{
			structFieldID,
			structFieldName,
			structFieldSurname,
			structFieldNoTag,
		},
	}

	structFieldTagValue = map[string]map[string]string{
		structFieldID:              map[string]string{structTagToMap: structTagValueToMapID},
		structFieldName:            map[string]string{structTagToMap: structTagValueToMapName},
		structFieldSurname:         map[string]string{structTagToMap: structTagValueToMapSurname},
		structFieldNoTag:           map[string]string{structTagToMap: structTagValueToMapNoTag},
		structFieldIgnoredInTagMap: map[string]string{},
	}
)

func (v *Struct) getFieldValue(field string) interface{} {
	switch field {
	case structFieldID:
		return v.ID
	case structFieldName:
		return v.Name
	case structFieldSurname:
		return v.Surname
	case structFieldNoTag:
		return v.NoTag
	case structFieldIgnoredInTagMap:
		return v.IgnoredInTagMap
	}
	return nil
}

func (v *Struct) getFieldValueByTagValue(tag string) interface{} {
	switch tag {
	case structTagValueToMapID:
		return v.ID
	case structTagValueToMapName:
		return v.Name
	case structTagValueToMapSurname:
		return v.Surname
	case structTagValueToMapNoTag:
		return v.NoTag
	}
	return nil
}

func (v *Struct) getFieldValuesByTag(tag string) []interface{} {
	switch tag {
	case structTagToMap:
		return []interface{}{
			v.ID,
			v.Name,
			v.Surname,
			v.NoTag,
		}
	}
	return nil
}

func (v *Struct) getFieldValuesByTagToMap() []interface{} {
	return []interface{}{
		v.ID,
		v.Name,
		v.Surname,
		v.NoTag,
	}
}

func (v *Struct) asMap() map[string]interface{} {
	return map[string]interface{}{
		structFieldID:              v.ID,
		structFieldName:            v.Name,
		structFieldSurname:         v.Surname,
		structFieldNoTag:           v.NoTag,
		structFieldIgnoredInTagMap: v.IgnoredInTagMap,
	}
}

func (v *Struct) asTagMap(tag string) map[string]interface{} {
	switch tag {
	case structTagToMap:
		return map[string]interface{}{
			structTagValueToMapID:      v.ID,
			structTagValueToMapName:    v.Name,
			structTagValueToMapSurname: v.Surname,
			structTagValueToMapNoTag:   v.NoTag,
		}
	}
	return nil
}
