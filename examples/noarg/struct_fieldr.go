// Code generated by 'fieldr'; DO NOT EDIT.

package noarg

const (
	structField_ID              = "ID"
	structField_Name            = "Name"
	structField_Surname         = "Surname"
	structField_noExport        = "noExport"
	structField_NoTag           = "NoTag"
	structField_IgnoredInTagMap = "IgnoredInTagMap"

	structTag_toMap = "toMap"

	structTagValue_toMap_ID       = "id"
	structTagValue_toMap_Name     = "name"
	structTagValue_toMap_Surname  = "surname"
	structTagValue_toMap_noExport = "no_export"
	structTagValue_toMap_NoTag    = "NoTag" //empty tag
)

var (
	struct_Fields = []string{
		structField_ID,
		structField_Name,
		structField_Surname,
		structField_NoTag,
		structField_IgnoredInTagMap,
	}

	struct_Tags = []string{structTag_toMap}

	struct_FieldTags = map[string][]string{
		structField_ID:              []string{structTag_toMap},
		structField_Name:            []string{structTag_toMap},
		structField_Surname:         []string{structTag_toMap},
		structField_NoTag:           []string{structTag_toMap},
		structField_IgnoredInTagMap: []string{},
	}

	struct_TagValues_toMap = []string{
		structTagValue_toMap_ID,
		structTagValue_toMap_Name,
		structTagValue_toMap_Surname,
		structTagValue_toMap_NoTag,
	}

	struct_TagValues = map[string][]string{
		structTag_toMap: []string{
			structTagValue_toMap_ID,
			structTagValue_toMap_Name,
			structTagValue_toMap_Surname,
			structTagValue_toMap_NoTag,
		},
	}

	struct_TagFields = map[string][]string{
		structTag_toMap: []string{
			structField_ID,
			structField_Name,
			structField_Surname,
			structField_NoTag,
		},
	}

	struct_FieldTagValue = map[string]map[string]string{
		structField_ID:              map[string]string{structTag_toMap: structTagValue_toMap_ID},
		structField_Name:            map[string]string{structTag_toMap: structTagValue_toMap_Name},
		structField_Surname:         map[string]string{structTag_toMap: structTagValue_toMap_Surname},
		structField_NoTag:           map[string]string{structTag_toMap: structTagValue_toMap_NoTag},
		structField_IgnoredInTagMap: map[string]string{},
	}
)

func (v *Struct) getFieldValue(field string) interface{} {
	switch field {
	case structField_ID:
		return v.ID
	case structField_Name:
		return v.Name
	case structField_Surname:
		return v.Surname
	case structField_NoTag:
		return v.NoTag
	case structField_IgnoredInTagMap:
		return v.IgnoredInTagMap
	}
	return nil
}

func (v *Struct) getFieldValueByTagValue(tag string) interface{} {
	switch tag {
	case structTagValue_toMap_ID:
		return v.ID
	case structTagValue_toMap_Name:
		return v.Name
	case structTagValue_toMap_Surname:
		return v.Surname
	case structTagValue_toMap_NoTag:
		return v.NoTag
	}
	return nil
}

func (v *Struct) getFieldValuesByTag(tag string) []interface{} {
	switch tag {
	case structTag_toMap:
		return []interface{}{
			v.ID,
			v.Name,
			v.Surname,
			v.NoTag,
		}
	}
	return nil
}

func (v *Struct) getFieldValuesByTagToMap() []interface{} {
	return []interface{}{
		v.ID,
		v.Name,
		v.Surname,
		v.NoTag,
	}
}

func (v *Struct) asMap() map[string]interface{} {
	return map[string]interface{}{
		structField_ID:              v.ID,
		structField_Name:            v.Name,
		structField_Surname:         v.Surname,
		structField_NoTag:           v.NoTag,
		structField_IgnoredInTagMap: v.IgnoredInTagMap,
	}
}

func (v *Struct) asTagMap(tag string) map[string]interface{} {
	switch tag {
	case structTag_toMap:
		return map[string]interface{}{
			structTagValue_toMap_ID:      v.ID,
			structTagValue_toMap_Name:    v.Name,
			structTagValue_toMap_Surname: v.Surname,
			structTagValue_toMap_NoTag:   v.NoTag,
		}
	}
	return nil
}
