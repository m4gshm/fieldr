// Code generated by 'fieldr'; DO NOT EDIT.

package noarg

import (
	"unsafe"
)

type (
	structWrapField        string
	structWrapFieldList    []structWrapField
	structWrapTag          string
	structWrapTagList      []structWrapTag
	structWrapTagValue     string
	structWrapTagValueList []structWrapTagValue
)

const (
	structWrapFieldID              = structWrapField("ID")
	structWrapFieldName            = structWrapField("Name")
	structWrapFieldSurname         = structWrapField("Surname")
	structWrapFieldNoExport        = structWrapField("noExport")
	structWrapFieldNoTag           = structWrapField("NoTag")
	structWrapFieldIgnoredInTagMap = structWrapField("IgnoredInTagMap")

	structWrapTagToMap = structWrapTag("toMap")

	structWrapTagValueToMapID       = structWrapTagValue("id")
	structWrapTagValueToMapName     = structWrapTagValue("name")
	structWrapTagValueToMapSurname  = structWrapTagValue("surname")
	structWrapTagValueToMapNoExport = structWrapTagValue("no_export")
	structWrapTagValueToMapNoTag    = structWrapTagValue("NoTag") //empty tag
)

var (
	structWrapFields = structWrapFieldList{"ID", "Name", "Surname", "NoTag", "IgnoredInTagMap"}

	structWrapTags = structWrapTagList{"toMap"}

	structWrapFieldTags = map[structWrapField]structWrapTagList{
		"ID":              structWrapTagList{"toMap"},
		"Name":            structWrapTagList{"toMap"},
		"Surname":         structWrapTagList{"toMap"},
		"NoTag":           structWrapTagList{"toMap"},
		"IgnoredInTagMap": structWrapTagList{},
	}

	structWrapTagValuesToMap = structWrapTagValueList{"id", "name", "surname", ""}

	structWrapTagValues = map[structWrapTag]structWrapTagValueList{
		"toMap": structWrapTagValueList{"id", "name", "surname", ""},
	}

	structWrapTagFields = map[structWrapTag]structWrapFieldList{
		"toMap": structWrapFieldList{"ID", "Name", "Surname", "NoTag"},
	}

	structWrapFieldTagValue = map[structWrapField]map[structWrapTag]structWrapTagValue{
		"ID":              map[structWrapTag]structWrapTagValue{"toMap": "id"},
		"Name":            map[structWrapTag]structWrapTagValue{"toMap": "name"},
		"Surname":         map[structWrapTag]structWrapTagValue{"toMap": "surname"},
		"NoTag":           map[structWrapTag]structWrapTagValue{"toMap": ""},
		"IgnoredInTagMap": map[structWrapTag]structWrapTagValue{},
	}
)

func (v *StructWrap) getFieldValue(field structWrapField) interface{} {
	switch field {
	case "ID":
		return v.ID
	case "Name":
		return v.Name
	case "Surname":
		return v.Surname
	case "NoTag":
		return v.NoTag
	case "IgnoredInTagMap":
		return v.IgnoredInTagMap
	}
	return nil
}

func (v *StructWrap) getFieldValueByTagValue(tag structWrapTagValue) interface{} {
	switch tag {
	case "id":
		return v.ID
	case "name":
		return v.Name
	case "surname":
		return v.Surname
	case "":
		return v.NoTag
	}
	return nil
}

func (v *StructWrap) getFieldValuesByTag(tag structWrapTag) []interface{} {
	switch tag {
	case "toMap":
		return []interface{}{v.ID, v.Name, v.Surname, v.NoTag}
	}
	return nil
}

func (v *StructWrap) getFieldValuesByTagToMap() []interface{} {
	return []interface{}{v.ID, v.Name, v.Surname, v.NoTag}
}

func (v *StructWrap) asMap() map[structWrapField]interface{} {
	return map[structWrapField]interface{}{
		"ID":              v.ID,
		"Name":            v.Name,
		"Surname":         v.Surname,
		"NoTag":           v.NoTag,
		"IgnoredInTagMap": v.IgnoredInTagMap,
	}
}

func (v *StructWrap) asTagMap(tag structWrapTag) map[structWrapTagValue]interface{} {
	switch tag {
	case "toMap":
		return map[structWrapTagValue]interface{}{
			"id":      v.ID,
			"name":    v.Name,
			"surname": v.Surname,
			"":        v.NoTag,
		}
	}
	return nil
}

func (v structWrapFieldList) strings() []string {
	return *(*[]string)(unsafe.Pointer(&v))
}

func (v structWrapTagList) strings() []string {
	return *(*[]string)(unsafe.Pointer(&v))
}

func (v structWrapTagValueList) strings() []string {
	return *(*[]string)(unsafe.Pointer(&v))
}
