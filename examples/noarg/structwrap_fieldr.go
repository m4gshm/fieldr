// Code generated by 'fieldr -type StructWrap -wrap'; DO NOT EDIT.

package noarg

type (
	structWrapField     string
	structWrapFields    []structWrapField
	structWrapTag       string
	structWrapTags      []structWrapTag
	structWrapTagValue  string
	structWrapTagValues []structWrapTagValue
)

const (
	structWrapField_ID              = structWrapField("ID")
	structWrapField_Name            = structWrapField("Name")
	structWrapField_Surname         = structWrapField("Surname")
	structWrapField_noExport        = structWrapField("noExport")
	structWrapField_NoTag           = structWrapField("NoTag")
	structWrapField_IgnoredInTagMap = structWrapField("IgnoredInTagMap")

	structWrapTag_toMap = structWrapTag("toMap")

	structWrapTagValue_toMap_ID       = structWrapTagValue("id")
	structWrapTagValue_toMap_Name     = structWrapTagValue("name")
	structWrapTagValue_toMap_Surname  = structWrapTagValue("surname")
	structWrapTagValue_toMap_noExport = structWrapTagValue("no_export")
	structWrapTagValue_toMap_NoTag    = structWrapTagValue("NoTag") //empty tag

)

func (v structWrapFields) strings() []string {
	strings := make([]string, len(v))
	for i, val := range v {
		strings[i] = string(val)
	}
	return strings
}

func (v structWrapTags) strings() []string {
	strings := make([]string, len(v))
	for i, val := range v {
		strings[i] = string(val)
	}
	return strings
}

func (v structWrapTagValues) strings() []string {
	strings := make([]string, len(v))
	for i, val := range v {
		strings[i] = string(val)
	}
	return strings
}

var (
	structWrap_Fields = structWrapFields{structWrapField_ID, structWrapField_Name, structWrapField_Surname, structWrapField_NoTag, structWrapField_IgnoredInTagMap}

	structWrap_Tags = structWrapTags{structWrapTag_toMap}

	structWrap_FieldTags = map[structWrapField]structWrapTags{
		structWrapField_ID:              structWrapTags{structWrapTag_toMap},
		structWrapField_Name:            structWrapTags{structWrapTag_toMap},
		structWrapField_Surname:         structWrapTags{structWrapTag_toMap},
		structWrapField_NoTag:           structWrapTags{structWrapTag_toMap},
		structWrapField_IgnoredInTagMap: structWrapTags{},
	}

	structWrap_TagValues = map[structWrapTag]structWrapTagValues{
		structWrapTag_toMap: structWrapTagValues{structWrapTagValue_toMap_ID, structWrapTagValue_toMap_Name, structWrapTagValue_toMap_Surname, structWrapTagValue_toMap_NoTag},
	}

	structWrap_TagFields = map[structWrapTag]structWrapFields{
		structWrapTag_toMap: structWrapFields{structWrapField_ID, structWrapField_Name, structWrapField_Surname, structWrapField_NoTag},
	}

	structWrap_FieldTagValue = map[structWrapField]map[structWrapTag]structWrapTagValue{
		structWrapField_ID:              map[structWrapTag]structWrapTagValue{structWrapTag_toMap: structWrapTagValue_toMap_ID},
		structWrapField_Name:            map[structWrapTag]structWrapTagValue{structWrapTag_toMap: structWrapTagValue_toMap_Name},
		structWrapField_Surname:         map[structWrapTag]structWrapTagValue{structWrapTag_toMap: structWrapTagValue_toMap_Surname},
		structWrapField_NoTag:           map[structWrapTag]structWrapTagValue{structWrapTag_toMap: structWrapTagValue_toMap_NoTag},
		structWrapField_IgnoredInTagMap: map[structWrapTag]structWrapTagValue{},
	}
)

func (v *StructWrap) getFieldValue(field structWrapField) interface{} {
	switch field {
	case structWrapField_ID:
		return v.ID
	case structWrapField_Name:
		return v.Name
	case structWrapField_Surname:
		return v.Surname
	case structWrapField_NoTag:
		return v.NoTag
	case structWrapField_IgnoredInTagMap:
		return v.IgnoredInTagMap
	}
	return nil
}

func (v *StructWrap) getFieldValueByTagValue(tag structWrapTagValue) interface{} {
	switch tag {
	case structWrapTagValue_toMap_ID:
		return v.ID
	case structWrapTagValue_toMap_Name:
		return v.Name
	case structWrapTagValue_toMap_Surname:
		return v.Surname
	case structWrapTagValue_toMap_NoTag:
		return v.NoTag
	}
	return nil
}

func (v *StructWrap) getFieldValuesByTag(tag structWrapTag) []interface{} {
	switch tag {
	case structWrapTag_toMap:
		return []interface{}{v.ID, v.Name, v.Surname, v.NoTag}
	}
	return nil
}

func (v *StructWrap) asMap() map[structWrapField]interface{} {
	return map[structWrapField]interface{}{
		structWrapField_ID:              v.ID,
		structWrapField_Name:            v.Name,
		structWrapField_Surname:         v.Surname,
		structWrapField_NoTag:           v.NoTag,
		structWrapField_IgnoredInTagMap: v.IgnoredInTagMap,
	}
}

func (v *StructWrap) asTagMap(tag structWrapTag) map[structWrapTagValue]interface{} {
	switch tag {
	case structWrapTag_toMap:
		return map[structWrapTagValue]interface{}{
			structWrapTagValue_toMap_ID:      v.ID,
			structWrapTagValue_toMap_Name:    v.Name,
			structWrapTagValue_toMap_Surname: v.Surname,
			structWrapTagValue_toMap_NoTag:   v.NoTag,
		}
	}
	return nil
}
