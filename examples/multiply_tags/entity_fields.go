// Code generated by 'fieldr'; DO NOT EDIT.

package gorm

type EntityCol string

const (
	ENTITY_COL_ID         EntityCol = "ID"
	ENTITY_COL_NAME       EntityCol = "NAME"
	ENTITY_COL_SURNAME    EntityCol = "SURNAME"
	ENTITY_COL_UPDATED_AT EntityCol = "UPDATED_AT"
	EntityGormID                    = "ID"
	EntityGormName                  = "NAME"
	EntityGormSurname               = "SURNAME"
	EntityGormUpd                   = "UPD"
	EntityJsonID                    = "id"
	EntityJsonName                  = "name"
	EntityGormJsonID                = "id"
	EntityGormJsonName              = "NAME"
	EntityGormJsonSurname           = "SURNAME"
)

func entityCols() []EntityCol { //nolint
	return []EntityCol{
		ENTITY_COL_ID,
		ENTITY_COL_NAME,
		ENTITY_COL_SURNAME,
		ENTITY_COL_UPDATED_AT,
	}
}

func (c EntityCol) field() string { //nolint
	switch c {
	case ENTITY_COL_ID:
		return "BaseEntity.ID"
	case ENTITY_COL_NAME:
		return "Name"
	case ENTITY_COL_SURNAME:
		return "Surname"
	case ENTITY_COL_UPDATED_AT:
		return "Upd.UpdatedAt"
	}
	return ""
}

func (c EntityCol) val(s *Entity) interface{} { //nolint
	switch c {
	case ENTITY_COL_ID:
		if s.BaseEntity != nil {
			return s.BaseEntity.ID
		}
	case ENTITY_COL_NAME:
		return s.Name
	case ENTITY_COL_SURNAME:
		return s.Surname
	case ENTITY_COL_UPDATED_AT:
		if s.Upd != nil {
			return s.Upd.UpdatedAt
		}
	}
	return nil
}

func (c EntityCol) ref(s *Entity) interface{} { //nolint
	switch c {
	case ENTITY_COL_ID:
		if s.BaseEntity != nil {
			return &s.BaseEntity.ID
		}
	case ENTITY_COL_NAME:
		return &s.Name
	case ENTITY_COL_SURNAME:
		return &s.Surname
	case ENTITY_COL_UPDATED_AT:
		if s.Upd != nil {
			return &s.Upd.UpdatedAt
		}
	}
	return nil
}

func gormOrJsonList() []string {
	return []string{EntityGormJsonID, EntityGormJsonName, EntityGormJsonSurname}
}
