package main

import (
	"bytes"
	"const_generator/struc"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"io/fs"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"golang.org/x/tools/go/packages"
)

const name = "const"

var (
	typ    = flag.String("type", "", "type name; must be set")
	output = flag.String("output", "", "output file name; default srcdir/<type_file>_const.go")
	tag    = flag.String("tag", "", "tag used to constant naming")
	wrap   = flag.Bool("wrap", false, "wrap tag const by own type")
)

func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of "+name+":\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetPrefix(name + ": ")
	flag.Usage = Usage
	flag.Parse()

	typeName := *typ
	if len(typeName) == 0 {
		flag.Usage()
		os.Exit(2)
	}

	args := flag.Args()
	outDirectory := outDir(args)

	pkg := extractPackage(args)
	packageName := pkg.Name
	files := pkg.Syntax
	if len(files) == 0 {
		log.Printf("no src files in package %s", packageName)
		return
	}

	typeFile := findTypeFile(files, typeName, *tag)
	if typeFile == nil {
		log.Printf("type not found, %s", typeName)
		return
	}

	g := TagConstantsGenerator{
		wrapType: *wrap,
	}
	if g.generateFile(typeFile) {
		src := g.format()

		outputName := *output
		if outputName == "" {
			baseName := fmt.Sprintf("%s_const.go", typeName)
			outputName = filepath.Join(outDirectory, strings.ToLower(baseName))
		}
		const userWriteOtherRead = fs.FileMode(0644)
		if err := ioutil.WriteFile(outputName, src, userWriteOtherRead); err != nil {
			log.Fatalf("writing output: %s", err)
		}
	} else {
		log.Printf("no generated")
	}
}

func outDir(args []string) string {
	if len(args) > 0 && isDir(args[0]) {
		return args[0]
	}
	return "."
}

func isDir(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

type TagConstantsGenerator struct {
	wrapType bool
	buf      bytes.Buffer
}

func (g *TagConstantsGenerator) printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func (g *TagConstantsGenerator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		log.Printf("go src code formatting error: %s", err)
		return g.buf.Bytes()
	}
	return src
}

func extractPackage(patterns []string) *packages.Package {
	packages, err := packages.Load(&packages.Config{
		Mode:  packages.NeedSyntax,
		Tests: false,
	}, patterns...)
	if err != nil {
		log.Fatal(err)
	}
	if len(packages) != 1 {
		log.Fatalf("error: %d packages found", len(packages))
	}
	return packages[0]
}

func findTypeFile(files []*ast.File, typeName string, tag string) *struc.Struct {
	for _, file := range files {
		structTags := struc.FindStructTags(file, typeName, struc.TagName(tag))
		if structTags != nil {
			return structTags
		}
	}
	return nil
}

func (g *TagConstantsGenerator) generateFile(str *struc.Struct) bool {
	return g.generate(str.PackageName, str.TypeName, str.TagNames, str.FieldNames, str.Tags)
}

func (g *TagConstantsGenerator) generate(
	packageName string, typeName string,
	tagNames []struc.TagName, fieldNames []struc.FieldName, tags map[struc.TagName]map[struc.FieldName]struc.TagValue,
) bool {
	generated := false
	g.printf("// Code generated by '%s %s'; DO NOT EDIT.\n\n", name, strings.Join(os.Args[1:], " "))
	g.printf("package %s\n", packageName)

	wrapType := g.wrapType
	if wrapType {
		g.printf("type(\n")
		for _, _tagName := range tagNames {
			constTypeName := getTypeName(typeName, _tagName)
			g.printf("%v %v\n", constTypeName, "string")
		}
		g.printf(")\n")
	}

	g.printf("const(\n")
	for i, _tagName := range tagNames {
		if i > 0 {
			g.printf("\n")
		}
		for _, _fieldName := range fieldNames {
			tagFields := tags[_tagName]
			_tagValue, ok := tagFields[_fieldName]
			if ok {
				constName := getConstName(typeName, _tagName, _fieldName)
				if wrapType {
					constTypeName := getTypeName(typeName, _tagName)
					g.printf("%v=%v(\"%v\")\n", constName, constTypeName, _tagValue)
				} else {
					g.printf("%v=\"%v\"\n", constName, _tagValue)
				}
				generated = true
			}
		}
	}
	g.printf(")\n")
	return generated
}

func getConstName(typeName string, tag struc.TagName, field struc.FieldName) string {
	return typeName + "_" + string(tag) + "_" + string(field)
}

func getTypeName(typeName string, tag struc.TagName) string {
	return typeName + "_" + string(tag)
}
