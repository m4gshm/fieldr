// Code generated by 'fieldr'; DO NOT EDIT.

package builder

import (
	"bytes"
	"example/sql_base"
	"time"
)

func (e *Entity[ID, S]) GetID() ID {
	if e != nil {
		if be := e.BaseEntity; be != nil {
			return be.ID
		}
	}

	var no ID
	return no
}

func (e *Entity[ID, S]) GetCode() string {
	if e != nil {
		if be := e.BaseEntity; be != nil {
			if rcae := be.RefCodeAwareEntity; rcae != nil {
				if cae := rcae.CodeAwareEntity; cae != nil {
					return cae.Code
				}
			}
		}
	}

	var no string
	return no
}

func (e *Entity[ID, S]) GetForeignID() ID {
	if e != nil {
		if be := e.BaseEntity; be != nil {
			return be.ForeignIDAwareEntity.ForeignID
		}
	}

	var no ID
	return no
}

func (e *Entity[ID, S]) GetSchema() string {
	if e != nil {
		return e.Metadata.Schema
	}

	var no string
	return no
}

func (e *Entity[ID, S]) GetVersion() int {
	if e != nil {
		return e.Metadata.Version
	}

	var no int
	return no
}

func (e *Entity[ID, S]) GetNoDB() *NoDBFieldsEntity {
	if e != nil {
		return e.NoDB
	}

	var no *NoDBFieldsEntity
	return no
}

func (e *Entity[ID, S]) GetName() StringBasedType[S] {
	if e != nil {
		return e.Name
	}

	var no StringBasedType[S]
	return no
}

func (e *Entity[ID, S]) GetSurname() string {
	if e != nil {
		return e.Surname
	}

	var no string
	return no
}

func (e *Entity[ID, S]) GetValues() []int32 {
	if e != nil {
		return e.Values
	}

	var no []int32
	return no
}

func (e *Entity[ID, S]) GetTs() []*time.Time {
	if e != nil {
		return e.Ts
	}

	var no []*time.Time
	return no
}

func (e *Entity[ID, S]) GetVersioned() sql_base.VersionedEntity {
	if e != nil {
		return e.Versioned
	}

	var no sql_base.VersionedEntity
	return no
}

func (e *Entity[ID, S]) GetChan() chan map[time.Time]string {
	if e != nil {
		return e.Chan
	}

	var no chan map[time.Time]string
	return no
}

func (e *Entity[ID, S]) GetSomeMap() map[StringBasedType[string]]bytes.Buffer {
	if e != nil {
		return e.SomeMap
	}

	var no map[StringBasedType[string]]bytes.Buffer
	return no
}

func (e *Entity[ID, S]) GetEmbedded() EmbeddedEntity {
	if e != nil {
		return e.Embedded
	}

	var no EmbeddedEntity
	return no
}

func (e *Entity[ID, S]) GetOldForeignID() *ForeignIDAwareEntity[ID] {
	if e != nil {
		return e.OldForeignID
	}

	var no *ForeignIDAwareEntity[ID]
	return no
}
