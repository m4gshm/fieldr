// Code generated by 'fieldr'; DO NOT EDIT.

package internal

import (
	"bytes"
	"example/builder"
	"example/sql_base"
	"time"
)

type EntityBuilder[ID any, S string] struct {
	id           ID
	code         string
	foreignID    ID
	schema       string
	version      int
	noDB         *builder.NoDBFieldsEntity
	name         builder.StringBasedType[S]
	surname      builder.StringBasedAlias
	values       []int32
	ts           []*time.Time
	versioned    sql_base.VersionedEntity
	chan_        chan map[time.Time]string
	someMap      map[builder.StringBasedType[string]]bytes.Buffer
	embedded     builder.EmbeddedEntity
	oldForeignID *builder.ForeignIDAwareEntity[ID]
}

func NewEntityBuilder[ID any, S string]() *EntityBuilder[ID, S] {
	return &EntityBuilder[ID, S]{}
}

func (b *EntityBuilder[ID, S]) Build() *builder.Entity[ID, S] {
	if b == nil {
		return &builder.Entity[ID, S]{}
	}
	return &builder.Entity[ID, S]{
		BaseEntity: &builder.BaseEntity[ID]{
			ID: b.id,
			RefCodeAwareEntity: &builder.RefCodeAwareEntity{
				CodeAwareEntity: &builder.CodeAwareEntity{
					Code: b.code,
				},
			},
			ForeignIDAwareEntity: builder.ForeignIDAwareEntity[ID]{
				ForeignID: b.foreignID,
			},
		},
		Metadata: builder.Metadata{
			Schema:  b.schema,
			Version: b.version,
		},
		NoDB:         b.noDB,
		Name:         b.name,
		Surname:      b.surname,
		Values:       b.values,
		Ts:           b.ts,
		Versioned:    b.versioned,
		Chan:         b.chan_,
		SomeMap:      b.someMap,
		Embedded:     b.embedded,
		OldForeignID: b.oldForeignID,
	}
}

func (b *EntityBuilder[ID, S]) ID(id ID) *EntityBuilder[ID, S] {
	if b != nil {
		b.id = id
	}
	return b
}

func (b *EntityBuilder[ID, S]) Code(code string) *EntityBuilder[ID, S] {
	if b != nil {
		b.code = code
	}
	return b
}

func (b *EntityBuilder[ID, S]) ForeignID(foreignID ID) *EntityBuilder[ID, S] {
	if b != nil {
		b.foreignID = foreignID
	}
	return b
}

func (b *EntityBuilder[ID, S]) Schema(schema string) *EntityBuilder[ID, S] {
	if b != nil {
		b.schema = schema
	}
	return b
}

func (b *EntityBuilder[ID, S]) Version(version int) *EntityBuilder[ID, S] {
	if b != nil {
		b.version = version
	}
	return b
}

func (b *EntityBuilder[ID, S]) NoDB(noDB *builder.NoDBFieldsEntity) *EntityBuilder[ID, S] {
	if b != nil {
		b.noDB = noDB
	}
	return b
}

func (b *EntityBuilder[ID, S]) Name(name builder.StringBasedType[S]) *EntityBuilder[ID, S] {
	if b != nil {
		b.name = name
	}
	return b
}

func (b *EntityBuilder[ID, S]) Surname(surname builder.StringBasedAlias) *EntityBuilder[ID, S] {
	if b != nil {
		b.surname = surname
	}
	return b
}

func (b *EntityBuilder[ID, S]) Values(values []int32) *EntityBuilder[ID, S] {
	if b != nil {
		b.values = values
	}
	return b
}

func (b *EntityBuilder[ID, S]) Ts(ts []*time.Time) *EntityBuilder[ID, S] {
	if b != nil {
		b.ts = ts
	}
	return b
}

func (b *EntityBuilder[ID, S]) Versioned(versioned sql_base.VersionedEntity) *EntityBuilder[ID, S] {
	if b != nil {
		b.versioned = versioned
	}
	return b
}

func (b *EntityBuilder[ID, S]) Chan_(chan_ chan map[time.Time]string) *EntityBuilder[ID, S] {
	if b != nil {
		b.chan_ = chan_
	}
	return b
}

func (b *EntityBuilder[ID, S]) SomeMap(someMap map[builder.StringBasedType[string]]bytes.Buffer) *EntityBuilder[ID, S] {
	if b != nil {
		b.someMap = someMap
	}
	return b
}

func (b *EntityBuilder[ID, S]) Embedded(embedded builder.EmbeddedEntity) *EntityBuilder[ID, S] {
	if b != nil {
		b.embedded = embedded
	}
	return b
}

func (b *EntityBuilder[ID, S]) OldForeignID(oldForeignID *builder.ForeignIDAwareEntity[ID]) *EntityBuilder[ID, S] {
	if b != nil {
		b.oldForeignID = oldForeignID
	}
	return b
}

func ToBuilder[ID any, S string](e *builder.Entity[ID, S]) *EntityBuilder[ID, S] {
	if e == nil {
		return &EntityBuilder[ID, S]{}
	}
	var (
		e_BaseEntity_ID                                              ID
		e_BaseEntity_be_RefCodeAwareEntity_rcae_CodeAwareEntity_Code string
		e_BaseEntity_be_ForeignIDAwareEntity_ForeignID               ID
	)
	if be := e.BaseEntity; be != nil {
		e_BaseEntity_ID = be.ID
		if rcae := be.RefCodeAwareEntity; rcae != nil {
			if cae := rcae.CodeAwareEntity; cae != nil {
				e_BaseEntity_be_RefCodeAwareEntity_rcae_CodeAwareEntity_Code = cae.Code
			}
		}
		e_BaseEntity_be_ForeignIDAwareEntity_ForeignID = be.ForeignIDAwareEntity.ForeignID
	}

	return &EntityBuilder[ID, S]{
		id:           e_BaseEntity_ID,
		code:         e_BaseEntity_be_RefCodeAwareEntity_rcae_CodeAwareEntity_Code,
		foreignID:    e_BaseEntity_be_ForeignIDAwareEntity_ForeignID,
		schema:       e.Metadata.Schema,
		version:      e.Metadata.Version,
		noDB:         e.NoDB,
		name:         e.Name,
		surname:      e.Surname,
		values:       e.Values,
		ts:           e.Ts,
		versioned:    e.Versioned,
		chan_:        e.Chan,
		someMap:      e.SomeMap,
		embedded:     e.Embedded,
		oldForeignID: e.OldForeignID,
	}
}
