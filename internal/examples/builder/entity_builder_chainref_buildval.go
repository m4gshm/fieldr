// Code generated by 'fieldr'; DO NOT EDIT.

package builder

import (
	"bytes"
	"example/sql_base"
	"time"
)

type EntityBuilderChainRefBuildVal[ID any, S string] struct {
	ID           ID
	Code         string
	ForeignID    ID
	Schema       string
	Version      int
	NoDB         *NoDBFieldsEntity
	Name         StringBasedType[S]
	Surname      string
	Values       []int32
	Ts           []*time.Time
	Versioned    sql_base.VersionedEntity
	Chan         chan map[time.Time]string
	SomeMap      map[StringBasedType[string]]bytes.Buffer
	Embedded     EmbeddedEntity
	OldForeignID *ForeignIDAwareEntity[ID]
}

func NewEntityBuilderChainRefBuildVal[ID any, S string]() *EntityBuilderChainRefBuildVal[ID, S] {
	return &EntityBuilderChainRefBuildVal[ID, S]{}
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) Build() Entity[ID, S] {
	if b == nil {
		return Entity[ID, S]{}
	}
	return Entity[ID, S]{
		BaseEntity: &BaseEntity[ID]{
			ID: b.ID,
			RefCodeAwareEntity: &RefCodeAwareEntity{
				CodeAwareEntity: &CodeAwareEntity{
					Code: b.Code,
				},
			},
			ForeignIDAwareEntity: ForeignIDAwareEntity[ID]{
				ForeignID: b.ForeignID,
			},
		},
		Metadata: Metadata{
			Schema:  b.Schema,
			Version: b.Version,
		},
		NoDB:         b.NoDB,
		Name:         b.Name,
		Surname:      b.Surname,
		Values:       b.Values,
		Ts:           b.Ts,
		Versioned:    b.Versioned,
		Chan:         b.Chan,
		SomeMap:      b.SomeMap,
		Embedded:     b.Embedded,
		OldForeignID: b.OldForeignID,
	}
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetID(iD ID) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.ID = iD
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetCode(code string) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.Code = code
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetForeignID(foreignID ID) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.ForeignID = foreignID
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetSchema(schema string) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.Schema = schema
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetVersion(version int) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.Version = version
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetNoDB(noDB *NoDBFieldsEntity) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.NoDB = noDB
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetName(name StringBasedType[S]) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.Name = name
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetSurname(surname string) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.Surname = surname
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetValues(values []int32) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.Values = values
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetTs(ts []*time.Time) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.Ts = ts
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetVersioned(versioned sql_base.VersionedEntity) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.Versioned = versioned
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetChan(chan_ chan map[time.Time]string) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.Chan = chan_
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetSomeMap(someMap map[StringBasedType[string]]bytes.Buffer) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.SomeMap = someMap
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetEmbedded(embedded EmbeddedEntity) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.Embedded = embedded
	}
	return b
}

func (b *EntityBuilderChainRefBuildVal[ID, S]) SetOldForeignID(oldForeignID *ForeignIDAwareEntity[ID]) *EntityBuilderChainRefBuildVal[ID, S] {
	if b != nil {
		b.OldForeignID = oldForeignID
	}
	return b
}
