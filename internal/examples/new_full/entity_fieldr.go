// Code generated by 'fieldr'; DO NOT EDIT.

package new_full

import (
	"bytes"
	"example/sql_base"
	"time"
)

func NewEntity[ID any](
	id ID,
	code string,
	foreignID ID,
	metadata struct {
		Schema  string
		Version int
	},
	noDB NoDBFieldsEntity,
	name StringBasedType[string],
	surname StringBasedAlias,
	values []int32,
	ts []*time.Time,
	versioned sql_base.VersionedEntity,
	channel chan map[time.Time]string,
	someMap map[StringBasedType[string]]bytes.Buffer,
	embedded EmbeddedEntity,
	oldForeignID *foreignIDAwareEntity[ID],
) Entity[ID] {
	return Entity[ID]{
		E: &E[ID]{
			ID: id,
			RefCodeAwareEntity: &RefCodeAwareEntity{
				CodeAwareEntity: &CodeAwareEntity{
					emptyInlined: &emptyInlined{},
					Code:         code,
				},
			},
			foreignIDAwareEntity: foreignIDAwareEntity[ID]{
				ForeignID: foreignID,
			},
		},
		metadata:     metadata,
		NoDB:         noDB,
		name:         name,
		surname:      surname,
		Values:       values,
		Ts:           ts,
		versioned:    versioned,
		channel:      channel,
		someMap:      someMap,
		Embedded:     embedded,
		OldForeignID: oldForeignID,
	}
}

func New2[ID any](
	e *E[ID],
	metadata struct {
		Schema  string
		Version int
	},
	noDB NoDBFieldsEntity,
	name StringBasedType[string],
	surname StringBasedAlias,
	values []int32,
	ts []*time.Time,
	versioned sql_base.VersionedEntity,
	channel chan map[time.Time]string,
	someMap map[StringBasedType[string]]bytes.Buffer,
	embedded EmbeddedEntity,
	oldForeignID *foreignIDAwareEntity[ID],
) *Entity[ID] {
	return &Entity[ID]{
		E:            e,
		metadata:     metadata,
		NoDB:         noDB,
		name:         name,
		surname:      surname,
		Values:       values,
		Ts:           ts,
		versioned:    versioned,
		channel:      channel,
		someMap:      someMap,
		Embedded:     embedded,
		OldForeignID: oldForeignID,
	}
}
