// Code generated by 'fieldr'; DO NOT EDIT.

package builder

type EntityBuilder[ID any] struct {
	iD        ID
	createdAt int64
	updatedAt int64
	name      string
}

func NewEntityBuilder[ID any]() *EntityBuilder[ID] {
	return &EntityBuilder[ID]{}
}

func (b *EntityBuilder[ID]) Build() *Entity[ID] {
	if b == nil {
		return &Entity[ID]{}
	}
	return &Entity[ID]{
		Model: &Model[ID]{
			ID:        b.iD,
			CreatedAt: b.createdAt,
			UpdatedAt: b.updatedAt,
		},
		Name: b.name,
	}
}

func (b *EntityBuilder[ID]) ID(iD ID) *EntityBuilder[ID] {
	if b != nil {
		b.iD = iD
	}
	return b
}

func (b *EntityBuilder[ID]) CreatedAt(createdAt int64) *EntityBuilder[ID] {
	if b != nil {
		b.createdAt = createdAt
	}
	return b
}

func (b *EntityBuilder[ID]) UpdatedAt(updatedAt int64) *EntityBuilder[ID] {
	if b != nil {
		b.updatedAt = updatedAt
	}
	return b
}

func (b *EntityBuilder[ID]) Name(name string) *EntityBuilder[ID] {
	if b != nil {
		b.name = name
	}
	return b
}

func (e *Entity[ID]) ToBuilder() *EntityBuilder[ID] {
	if e == nil {
		return &EntityBuilder[ID]{}
	}
	var (
		Model_ID        ID
		Model_CreatedAt int64
		Model_UpdatedAt int64
	)
	if m := e.Model; m != nil {
		Model_ID = m.ID
		Model_CreatedAt = m.CreatedAt
		Model_UpdatedAt = m.UpdatedAt
	}

	return &EntityBuilder[ID]{
		iD:        Model_ID,
		createdAt: Model_CreatedAt,
		updatedAt: Model_UpdatedAt,
		name:      e.Name,
	}
}
