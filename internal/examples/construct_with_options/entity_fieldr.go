// Code generated by 'fieldr'; DO NOT EDIT.

package construct_with_options

import (
	"bytes"
	"example/sql_base"
	"time"
)

func WithID[ID any](iD ID) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e1 := e.E
		if e1 == nil {
			e1 = new(E[ID])
			e.E = e1
		}
		e1.ID = iD
	}
}

func WithCode[ID any](code string) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e1 := e.E
		if e1 == nil {
			e1 = new(E[ID])
			e.E = e1
		}
		rcae := e1.RefCodeAwareEntity
		if rcae == nil {
			rcae = new(RefCodeAwareEntity)
			e1.RefCodeAwareEntity = rcae
		}
		cae := rcae.CodeAwareEntity
		if cae == nil {
			cae = new(CodeAwareEntity)
			rcae.CodeAwareEntity = cae
		}
		cae.Code = code
	}
}

func WithForeignID[ID any](foreignID ID) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e1 := e.E
		if e1 == nil {
			e1 = new(E[ID])
			e.E = e1
		}
		e1.foreignIDAwareEntity.ForeignID = foreignID
	}
}

func WithMetadata[ID any](metadata struct {
	Schema  string
	Version int
}) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e.metadata = metadata
	}
}

func WithNoDB[ID any](noDB NoDBFieldsEntity) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e.NoDB = noDB
	}
}

func WithName[ID any](name StringBasedType[string]) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e.name = name
	}
}

func WithSurname[ID any](surname StringBasedAlias) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e.surname = surname
	}
}

func WithValues[ID any](values []int32) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e.Values = values
	}
}

func WithTs[ID any](ts []*time.Time) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e.Ts = ts
	}
}

func WithVersioned[ID any](versioned sql_base.VersionedEntity) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e.versioned = versioned
	}
}

func WithChannel[ID any](channel chan map[time.Time]string) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e.channel = channel
	}
}

func WithSomeMap[ID any](someMap map[StringBasedType[string]]bytes.Buffer) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e.someMap = someMap
	}
}

func WithEmbedded[ID any](embedded EmbeddedEntity) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e.Embedded = embedded
	}
}

func WithOldForeignID[ID any](oldForeignID *foreignIDAwareEntity[ID]) func(e *Entity[ID]) {
	return func(e *Entity[ID]) {
		e.OldForeignID = oldForeignID
	}
}
